function cropCell = cropPairs(rfp, gfp, centroidArray, pairMat)
%%cropPairs Parses the centroidArray matrix and pairMat matrix to aggregate
%%cropped rfp and gfp images, with the adjusted coordinates of the
%%centroids of the SPB foci into the cell array, cropCell.
%
%   inputs :
%       rfp : A 3D matrix containing the images from the RFP channel. This
%       function assumes the SPB foci are in the RFP channel.
%
%       gfp : A 3D matrix containing the images from teh GFP channel. This
%       funciton assumes the plasmid signals are in the GFP channel.
%
%       centroidArray : A 2D matrix where each row is a centroid and the
%       columns contain the X, Y, and Z coordinates in voxels. Generated by
%       the spbID function.
%
%       pairMat : A 2D matrix composed of row indices from the
%       centroidArray variable. Generated by the pariCentroids function.
%
%   output :
%       cropCell : A cell array containing the cropped rfp and gfp images
%       and the adjusted coordinates of the centroids of the SPB foci in
%       the cropped rfp image. Columns are rfp, gfp, 1st spb coordinate 
%       (X, Y, Z), and 2nd spb coordinate (X, Y, Z);
%
%   Written by Josh Lawrimore, 1/23/2019
%% Pre-allocate all cropped region cell array
cropCell = cell([size(pairMat, 1),4]);
for n = 1:size(pairMat, 1)
    %Calculate the distance in X and Y of the two centroids
    subCen = abs(ceil(centroidArray(pairMat(n,1),1:2) -...
        centroidArray(pairMat(n,2),1:2)));
    meanCen = ceil((centroidArray(pairMat(n,1),1:2) +...
        centroidArray(pairMat(n,2),1:2))/2);
    xIdxs = floor(meanCen(1) - subCen(1)/2-10):ceil(meanCen(1) + subCen(1)/2)+10;
    yIdxs = floor(meanCen(2) - subCen(2)/2-10):ceil(meanCen(2) + subCen(2)/2)+10;
    %% Correct indices if out of range
    if min(xIdxs) < 1
        xMax = max(xIdxs);
        xIdxs = 1:xMax;
    end
    if max(xIdxs) > size(rfp,2)
        xMin = min(xIdxs);
        xIdxs = xMin:size(rfp,2);
    end
    if min(yIdxs) < 1
        yMax = max(yIdxs);
        yIdxs = 1:yMax;
    end
    if max(yIdxs) > size(rfp,1)
        yMin = min(yIdxs);
        yIdxs = yMin:size(rfp,1);
    end
    %% Update Centroid positions
    newCen1 = centroidArray(pairMat(n,1),1:2) - [min(xIdxs)-1, min(yIdxs)-1];
    newCen2 = centroidArray(pairMat(n,2),1:2) - [min(xIdxs)-1, min(yIdxs)-1];
    %% Crop images and store in cropCell array
    cropCell{n,1} = rfp(yIdxs, xIdxs, :);
    cropCell{n,2} = gfp(yIdxs, xIdxs, :);
    %% Put new centroid data in cropCell Array
    cropCell{n,3} = [newCen1, centroidArray(pairMat(n,1),3)];
    cropCell{n,4} = [newCen2, centroidArray(pairMat(n,2),3)];
    %% Visualize new centroid over cropped image
%     h = figure('WindowState', 'maximized');
%     imshow(max(cropCell{n,1}, [], 3), []);
%     hold on;
%     scatter(cropCell{n,3}(1), cropCell{n,3}(2));
%     scatter(cropCell{n,4}(1), cropCell{n,4}(2));
%     hold off;
%     waitforbuttonpress;
%     close(h);
end